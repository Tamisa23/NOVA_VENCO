
  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT Broker ‡∏ú‡πà‡∏≤‡∏ô WebSockets
  const mqttClient = mqtt.connect("wss://2217876f209d4a73af014e541592ee16.s1.eu.hivemq.cloud:8884/mqtt", {
      username: "Venco",
      password: "12345678Venco",
      rejectUnauthorized: false // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SSL Certificate (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
  });

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  mqttClient.on("connect", function () {
      console.log("‚úÖ MQTT Connected!");
      mqttClient.subscribe("DOAU", function (err) {
          if (!err) {
              console.log("‚úÖ Subscribed to DOAU");
          }
      });
  });

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô HTML
  function updateElement(id, value) {
      let element = document.getElementById(id);
      if (element && value !== undefined) {
          element.innerText = parseFloat(value).toFixed(2); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      }
  }


 // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏±‡∏î‡∏•‡∏° (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö *_ac)
 function updateIntegerElement(id, value) {
    const element = document.getElementById(id);
    if (element) {
        let numericValue = parseFloat(value);
        element.textContent = !isNaN(numericValue) ? Math.round(numericValue) : "N/A"; // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
    }
}

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ RUN / OFF (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö *_st)
    function updateStatusElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            let numericValue = parseFloat(value);
            console.log(`Updating status for ${id}: ${numericValue}, Type: ${typeof numericValue}`);
            if (!isNaN(numericValue)) {
                element.textContent = numericValue > 10 ? "RUN" : "OFF";
                console.log(`‚úÖ Updated ${id} to: ${element.textContent}`);
            } else {
                element.textContent = "N/A";
                console.log(`‚ùå Invalid value for ${id}, setting to N/A`);
            }
        } else {
            console.error(`‚ùå Element with ID '${id}' not found.`);
        }
    }

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï GIF (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà)
function updateFanGIF(id, value) {
    let fanGif = document.getElementById(id);
    if (!fanGif) return;

    let numericValue = parseFloat(value);
    if (!isNaN(numericValue) && numericValue > 10) {
        fanGif.style.display = "block";  
    } else {
        fanGif.style.display = "none";
    }
}


   // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UV
   function updateUV(UV) {
    let imgUV_On = document.getElementById("UV_On");
    let imgUV_Off = document.getElementById("UV_Off");

    if (!imgUV_On || !imgUV_Off) return;

    // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô
    imgUV_On.style.display = "none";
    imgUV_Off.style.display = "none";

    if (parseInt(UV) === 1) {
  imgUV_On.style.display = "block";  
} else {
  imgUV_Off.style.display = "block";
}
 }

// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å MQTT ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
mqttClient.on("message", function (topic, message) {
    try {
        var data = JSON.parse(message.toString());
        console.log("üì© Received MQTT Data:", data);

            // ‚úÖ Debugging log ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
            console.log("SA AC:", data.Speed, "EBM AC:", data.AC_Speed );

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡∏û‡∏±‡∏î‡∏•‡∏°
            if (data.sa1_ac !== undefined) {
                console.log(`Updating SA: ${data.sa_ac} (Type: ${typeof data.sa1_ac})`);
                updateIntegerElement("sa_ac", data.sa_ac);  
                updateStatusElement("sa_st", data.sa_ac);
            }

            if (data.ebm_ac !== undefined) {
                console.log(`Updating EBM: ${data.ebm_ac} (Type: ${typeof data.ebm_ac})`);
                updateIntegerElement("ebm_ac", data.ebm_ac);  
                updateStatusElement("ebm_st", data.ebm_ac);
            }

      

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï GIF ‡∏Ç‡∏≠‡∏á‡∏û‡∏±‡∏î‡∏•‡∏°
        if (data.AC_Speed !== undefined) updateFanGIF("ebm_gif", data.AC_Speed);
        if (data.Speed !== undefined) updateFanGIF("sa_gif", data.Speed);
        

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
        if (data.SA_Temp !== undefined) updateElement("SA_Temp", data.SA_Temp);
        if (data.SA_Hum !== undefined) updateElement("SA_Hum", data.SA_Hum);
        if (data.OA_Temp !== undefined) updateElement("OA_Temp", data.OA_Temp);
        if (data.OA_Hum !== undefined) updateElement("OA_Hum", data.OA_Hum);
        if (data.Lev_Coil_Temp !== undefined) updateElement("oa_lev_t", data.oa_lev_t);
        if (data.DXVALVE !== undefined) updateElement("DXVALVE", data.DXVALVE);

    } catch (error) {
        console.error("‚ùå Error parsing MQTT message:", error);
    }
});


  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
  document.addEventListener("DOMContentLoaded", function() {
      console.log("üìå DOM Loaded, Ready to receive MQTT messages.");
  });

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á MQTT
  mqttClient.on("error", function (error) {
      console.error("‚ùå MQTT Error:", error);
  });

  mqttClient.on("close", function () {
      console.warn("‚ö†Ô∏è MQTT Disconnected! Reconnecting...");
  });



